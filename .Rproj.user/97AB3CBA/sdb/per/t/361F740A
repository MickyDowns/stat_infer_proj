{
    "contents" : "Model Selection\n================\n\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages, and a very nice way of distributing an analysis. It has some very simple syntax rules.\n\n```{r}\nlibrary(ISLR)\nsummary(Hitters)\n```\nThere are some missing values here, so before we proceed we will remove them:\n\n```{r}\nHitters=na.omit(Hitters)\nwith(Hitters,sum(is.na(Salary)))\n```\n\n\n\nBest Subset regression\n------------------------\nWe will now use the package `leaps` to evaluate all the best-subset models.\n```{r}\nlibrary(leaps)\nregfit.full=regsubsets(Salary~.,data=Hitters)\nsummary(regfit.full)\n```\nIt gives by default best-subsets up to size 8; lets increase that to 19, i.e. all the variables\n```{r}\nregfit.full=regsubsets(Salary~.,data=Hitters, nvmax=19)\nreg.summary=summary(regfit.full)\nnames(reg.summary)\nplot(reg.summary$cp,xlab=\"Number of Variables\",ylab=\"Cp\")\nwhich.min(reg.summary$cp)\npoints(10,reg.summary$cp[10],pch=20,col=\"red\")\n```\nThere is a plot method for the `regsubsets`  object\n```{r}\nplot(regfit.full,scale=\"Cp\")\ncoef(regfit.full,10)\n```\n\n\n\nForward Stepwise Selection\n--------------------------\nHere we use the `regsubsets` function but specify the `method=\"forward\" option:\n```{r}\nregfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method=\"forward\")\nsummary(regfit.fwd)\nplot(regfit.fwd,scale=\"Cp\")\n```\n\n\n\n\nModel Selection Using a Validation Set\n---------------------------------------\nLets make a training and validation set, so that we can choose a good subset model.\nWe will do it using a slightly different approach from what was done in the the book.\n```{r}\ndim(Hitters)\nset.seed(1)\ntrain=sample(seq(263),180,replace=FALSE)\ntrain\nregfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method=\"forward\")\n```\nNow we will make predictions on the observations not used for training. We know there are 19 models, so we set up some vectors to record the errors. We have to do a bit of work here, because there is no predict method for `regsubsets`.\n```{r}\nval.errors=rep(NA,19)\nx.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!\nfor(i in 1:19){\n  coefi=coef(regfit.fwd,id=i)\n  pred=x.test[,names(coefi)]%*%coefi\n  val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)\n}\nplot(sqrt(val.errors),ylab=\"Root MSE\",ylim=c(300,400),pch=19,type=\"b\")\npoints(sqrt(regfit.fwd$rss[-1]/180),col=\"blue\",pch=19,type=\"b\")\nlegend(\"topright\",legend=c(\"Training\",\"Validation\"),col=c(\"blue\",\"black\"),pch=19)\n```\nAs we expect, the training error goes down monotonically as the model gets bigger, but not so for the validation error.\n\nThis was a little tedious - not having a predict method for `regsubsets`. So we will write one!\n```{r}\npredict.regsubsets=function(object,newdata,id,...){\n  form=as.formula(object$call[[2]])\n  mat=model.matrix(form,newdata)\n  coefi=coef(object,id=id)\n  mat[,names(coefi)]%*%coefi\n}\n```\n\n\n\n\nModel Selection by Cross-Validation\n-----------------------------------\nWe will do 10-fold cross-validation. Its really easy!\n```{r}\nset.seed(11)\nfolds=sample(rep(1:10,length=nrow(Hitters)))\nfolds\ntable(folds)\ncv.errors=matrix(NA,10,19)\nfor(k in 1:10){\n  best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method=\"forward\")\n  for(i in 1:19){\n    pred=predict(best.fit,Hitters[folds==k,],id=i)\n    cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)\n  }\n}\nrmse.cv=sqrt(apply(cv.errors,2,mean))\nplot(rmse.cv,pch=19,type=\"b\")\n```\n\n\n\nRidge Regression and the Lasso\n-------------------------------\nWe will use the package `glmnet`, which does not use the model formula language, so we will set up an `x` and `y`.\n```{r}\nlibrary(glmnet)\nx=model.matrix(Salary~.-1,data=Hitters) \ny=Hitters$Salary\n```\nFirst we will fit a ridge-regression model. This is achieved by calling `glmnet` with `alpha=0` (see the helpfile). There is also a `cv.glmnet` function which will do the cross-validation for us. \n```{r}\nfit.ridge=glmnet(x,y,alpha=0)\nplot(fit.ridge,xvar=\"lambda\",label=TRUE)\ncv.ridge=cv.glmnet(x,y,alpha=0)\nplot(cv.ridge)\n```\nNow we fit a lasso model; for this we use the default `alpha=1`\n```{r}\nfit.lasso=glmnet(x,y)\nplot(fit.lasso,xvar=\"lambda\",label=TRUE)\ncv.lasso=cv.glmnet(x,y)\nplot(cv.lasso)\ncoef(cv.lasso)\n```\n\n Suppose we want to use our earlier train/validation division to select the `lambda` for the lasso.\n This is easy to do.\n```{r}\nlasso.tr=glmnet(x[train,],y[train])\nlasso.tr\npred=predict(lasso.tr,x[-train,])\ndim(pred)\nrmse= sqrt(apply((y[-train]-pred)^2,2,mean))\nplot(log(lasso.tr$lambda),rmse,type=\"b\",xlab=\"Log(lambda)\")\nlam.best=lasso.tr$lambda[order(rmse)[1]]\nlam.best\ncoef(lasso.tr,s=lam.best)\n```\n",
    "created" : 1423157787076.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "982652050",
    "id" : "361F740A",
    "lastKnownWriteTime" : 1423182442,
    "path" : "~/Documents/Pers/Ed/Courses/stats216/apps/ch6 r lab mark.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}