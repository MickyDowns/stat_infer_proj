4.9/sqrt(40)
# note: sd of sample (40) is \sim pop sd / \sqrt(n)
sd(rexp(1000, rate=0.2))/sqrt(40)
nosim=1000; n=40; sd(apply(matrix(rexp(nosim*n,rate=0.2),nosim),1,mean))
hist(rexp(1000,rate=0.2))
head(rexp(10,rate=0.2))
?colmean
?colmeans
?colMeans
nosim=1000; n=40
smpls=apply(matrix(rexp(nosim*n,rate=0.2),nosim),1,mean)
par(mfrow=c(1,2))
# generate a vector of 1,000 means (mns) for each of the n=40 samples.
mns=rowMeans(smpls)
nosim=1000; n=40
mns=apply(matrix(rexp(nosim*n,rate=0.2),nosim),1,mean)
par(mfrow=c(1,2))
# generate a vector of 1,000 means (mns) for each of the n=40 samples.
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,rate=0.2)))
hist(mns)
nosim=1000; n=40
smpls=matrix(rexp(nosim*n,rate=0.2),nosim)
mns=apply(smpls,1,mean)
par(mfrow=c(1,2))
# generate a vector of 1,000 means (mns) for each of the n=40 samples.
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,rate=0.2)))
hist(mns)
sd(rexp(40000, rate=0.2))/sqrt(40)
sd(smpls)
sd(mns)
sqrt(var(rexp(40000, rate=0.2)))/40
sd(mns)
sd(rexp(40000, rate=0.2)))/sqrt(40)
sd(rexp(40000, rate=0.2))/sqrt(40)
sd(mns)
where $\lambda$ is the rate parameter and \[\frac{1}{\lambda}\] is both the distribution mean and it's standard deviation.
mean(smpls)
mean(mns)
nosim=1000; n=40
pop=matrix(rexp(nosim*n,rate=0.2),nosim)
# generate a vector of 1,000 means (mns) for each of the n=40 samples.
mns_pop=mean(pop)
mns_pop=mean(pop); mns_pop
mns_smpl=apply(pop,1,mean); mns_smpl
mns_smpl=apply(pop,1,mean); mns_smpl
mns_smpl=apply(pop,1,mean); mean(mns_smpl)
mns_pop=mean(pop); mns_pop
nosim=1000; n=40
pop=matrix(rexp(nosim*n,rate=0.2),nosim)
# generate a vector of 1,000 means (mns) for each of the n=40 samples.
mns_pop=mean(pop); mns_pop
mns_smpl=apply(pop,1,mean); mean(mns_smpl)
vrs_pop=var(pop); vrs_pop
?var
var(pop)
vrs_smpl=apply(pop,1,var)
vrs_smpl
nosim=1000; n=40
pop=matrix(rexp(nosim*n,rate=0.2),nosim)
# generate a vector of 1,000 means (mns) for each of the n=40 samples.
mns_pop=mean(pop); mns_pop
mns_smpl=apply(pop,1,mean); mean(mns_smpl)
mns_smpl
var(pop)
dim(var(pop))
vrs_pop=var(mns_pop); vrs_pop
hist(rexp(1000,rate=0.2))
nosim=1000; n=40
pop=matrix(rexp(nosim*n,rate=0.2),nosim)
dim(pop)
head(pop)
mns_pop=mean(pop); mns_pop
mns_smpl=apply(pop,1,mean); mean(mns_smpl)
vrs_pop=var(mns_pop); vrs_pop
vrs_pop=var(mns_smpl); vrs_pop
dim(mns_smpl)
length(mns_smpl)
vrs_pop=var(mns_smpl); vrs_pop
vrs_smpl=apply(pop,1,var); vrs_smpl
vrs_smpl=apply(pop,2,var); vrs_smpl
vrs_smpl=var(mns_smpl); vrs_smpl
sds=apply(pop,1,sd),sds
sds=apply(pop,1,sd); sds
hist(vrs_smpl)
vrs_smpl
hist(mns_smpl)
var(rexp(40000, rate=0.2))/sqrt(40)
sd(mns)
sds=apply(pop,1,sd); sds
var(rexp(40000, rate=0.2))/40
vrs_smpl_mns=var(mns_pop_smpl); vrs_smpl_mns
mns_pop=mean(pop); mns_pop
## generate a vector of 1,000 means for each n=40 sample
mns_pop_smpl=apply(pop,1,mean); mean(mns_pop_smpl)
# variance
## variance of the 1,000 sample means.
vrs_smpl_mns=var(mns_pop_smpl); vrs_smpl_mns
# note that the standard deviation of a sample (40) is approximately equal to S/sqrt(n)
var(rexp(40000, rate=0.2))/40
var(rexp(40000, rate=0.2))/40
var(mns_pop_smpl)
vrs_smpl_mns=var(mns_pop_smpl); vrs_smpl_mns
var(rexp(40000, rate=0.2))/40
hist(rexp(40,rate=0.2))
hist(rexp(1000,rate=0.2))
hist(rexp(40,rate=0.2))
# now, we'll generate a matrix w/ 1,000 rows each of 40 samples from the exponential distribution
hist(rexp(40,rate=0.2))
par(mfrow=c(1,2))
# first, let's look at the distributions of two samples from the exponential distribution:
hist(rexp(40,rate=0.2)); hist(rexp(1000,rate=0.2))
# here is the distribution of 1,000 samples frm the exponential distribution
hist(rexp(1000,rate=0.2))
# here is what a distribution of 40 samples looks like
hist(rexp(40,rate=0.2))
rnorm(1)
rnorm(2)
rexp(2)
# convergence of cumulative sample means
n=10000; means=cumsum(rexp(n))/(1:n) \\
n=10000; means=cumsum(rexp(n))/(1:n)
library(ggplot2); g=ggplot(data.frame(x=1:n,y=means),aes(x=x,y=y#))
g=g+geomhline(yintercept=0)+geomline(size=2)
library(ggplot2); g=ggplot(data.frame(x=1:n,y=means),aes(x=x,y=y))
g=g+geomhline(yintercept=0)+geomline(size=2)
g=g+geom$hline(yintercept=0)+geom$line(size=2)
n=10000; means=cumsum(rexp(n))/(1:n)
library(ggplot2); g=ggplot(data.frame(x=1:n,y=means),aes(x=x,y=y))
g=g+geom_hline(yintercept=0)+geom_line(size=2)
g=g+labs(x="Number of jobs",y="Cumulative mean")
g
n=10000; means=cumsum(rexp(n,rate=0.2))/(1:n)
library(ggplot2); g=ggplot(data.frame(x=1:n,y=means),aes(x=x,y=y))
g=g+geom_hline(yintercept=0)+geom_line(size=2)
g=g+labs(x="Number of jobs",y="Cumulative mean")
g
mns_pop=mean(pop); mns_pop
## generate a vector of 1,000 means for each n=40 sample
mns_pop_smpl=apply(pop,1,mean); mean(mns_pop_smpl)
hist(mns_pop)
hist(mns_pop_smpl)
hist(rexp(1000,rate=0.2))
mns_pop_smpl=apply(pop,1,mean)
mn_of_mns=mean(mns_pop_smpl)
normalized=(mns_pop_smpl/mn_of_mns)/sd(mns_pop_smpl)
# histogram of sample means and normalized sample means
par(mfrow=c(1,2))
hist(mns_pop_smpl); hist(normalized)
normalized=(mns_pop_smpl-mn_of_mns)/sd(mns_pop_smpl)
# histogram of sample means and normalized sample means
par(mfrow=c(1,2))
hist(mns_pop_smpl); hist(normalized)
nosim=1000; n=40
set.seed(1234)
pop=matrix(rexp(nosim*n,rate=0.2),nosim)
mean(pop)
sum(normalized)
mean(normalized)
hist(rexp(pop,rate=0.2))
hist(rexp(pop[1,],rate=0.2))
hist(rexp(pop[1,],rate=0.2))
# generating a matrix of 1,000 rows of n=40 samples for subsequent calculations
nosim=1000; n=40
set.seed(1234)
pop=matrix(rexp(nosim*n,rate=0.2),nosim)
# as a point of reference, here is the distribution of the entire population
par(mfrow=c(1,2))
hist(rexp(pop,rate=0.2))
# here is the distribution of a single sample
hist(rexp(pop[1,],rate=0.2))
hist(rexp(pop,rate=0.2),main="'population' distribution")
hist(rexp(pop,rate=0.2),main="'population' distribution")
# here is the distribution of a single sample
# generating a matrix of 1,000 rows of n=40 samples for subsequent calculations
nosim=1000; n=40
set.seed(1234)
pop=matrix(rexp(nosim*n,rate=0.2),nosim)
# as a point of reference, here is the distribution of the entire population
par(mfrow=c(1,2))
hist(rexp(pop,rate=0.2),main="'population' distribution")
# here is the distribution of a single sample
hist(rexp(pop[1,],rate=0.2),main="n=40 sample distribution")
nosim=1000; n=40
set.seed(123)
pop=matrix(rexp(nosim*n,rate=0.2),nosim)
# as a point of reference, here is the distribution of the entire population
par(mfrow=c(1,2))
hist(rexp(pop,rate=0.2),main="'population' distribution")
# here is the distribution of a single sample
hist(rexp(pop[1,],rate=0.2),main="n=40 sample distribution")
The implication for the mean is that, as the sample size grows to the limit, 1. the sample mean converges on the population mean, and 2. the distribution of the sample means will be normal (i.e., $\hat{X_n}\sim N(\mu,\sigma^2/n)$).
set.seed=(123)
n=10000;
means=(cumsum(rexp(n,rate=0.2))/(1:n)-mean(pop)
library(ggplot2); g=ggplot(data.frame(x=1:n,y=means),aes(x=x,y=y))
set.seed=(123)
n=10000;
means=(cumsum(rexp(n,rate=0.2))/(1:n)-mean(pop))
library(ggplot2); g=ggplot(data.frame(x=1:n,y=means),aes(x=x,y=y))
g=g+geom_hline(yintercept=0)+geom_line(size=2)
g=g+labs(x="Number of jobs",y="Cumulative mean")
g
mean(pop)
set.seed=(123)
n=1000;
means=(cumsum(rexp(n,rate=0.2))/(1:n)-mean(pop))
library(ggplot2); g=ggplot(data.frame(x=1:n,y=means),aes(x=x,y=y))
g=g+geom_hline(yintercept=0)+geom_line(size=2)
g=g+labs(x="Number of jobs",y="Cumulative mean")
g
set.seed=(123)
n=40000;
means=(cumsum(rexp(n,rate=0.2))/(1:n)-mean(pop))
library(ggplot2); g=ggplot(data.frame(x=1:n,y=means),aes(x=x,y=y))
g=g+geom_hline(yintercept=0)+geom_line(size=2)
g=g+labs(x="Number of jobs",y="Cumulative mean")
g
set.seed=(123)
n=10000;
means=(cumsum(rexp(n,rate=0.2))/(1:n)-mean(pop))
library(ggplot2); g=ggplot(data.frame(x=1:n,y=means),aes(x=x,y=y))
g=g+geom_hline(yintercept=0)+geom_line(size=2)
g=g+labs(x="Number of jobs",y="Cumulative mean")
g
sd(pop)
set.seed=(123)
n=10000;
means=((cumsum(rexp(n,rate=0.2))/(1:n)-mean(pop))/sd(pop))
library(ggplot2); g=ggplot(data.frame(x=1:n,y=means),aes(x=x,y=y))
g=g+geom_hline(yintercept=0)+geom_line(size=2)
g=g+labs(x="Number of jobs",y="Cumulative mean")
g
vrs_smpl_mns=var(mns_pop_smpl); vrs_smpl_mns
var(pop)
var(rexp(40000, rate=0.2))/40
dim(mns_pop_smpl)
length(mns_pop_smpl)
vrs_pop_smpl=apply(pop,1,var)
hist(vrs_pop_smp)
hist(vrs_pop_smpl)
var(rexp(40000, rate=0.2))
set.seed(123)
var(rexp(40000, rate=0.2))
vrs_pop_smpl
hist(vrs_pop_smpl)
set.seed(123)
var(rexp(40000, rate=0.2))
vrs_pop_smpl=apply(pop,1,var)
mean(vrs_pop_smpl)
hist(vrs_pop_smpl)
set.seed(123)
pop_var=var(rexp(40000, rate=0.2));pop_var
set.seed(123)
pop_var=var(rexp(40000, rate=0.2));pop_var
## distribution of sample variances s/b centered on population variance
vrs_pop_smpl=apply(pop,1,var)
mn_smpl_var=mean(vrs_pop_smpl);mn_smpl_var
par(mfrow=c(1,1))
hist(vrs_pop_smpl,main=cat("pop var:",pop_var,", mean sample vars:",mn_smpl_var))
tag=cat("pop var:",pop_var,", mean sample vars:",mn_smpl_var)
hist(vrs_pop_smpl,main=tag)
tab
tag
tag=c("pop var:",pop_var,", mean sample vars:",mn_smpl_var)
hist(vrs_pop_smpl,main=tag)
tag=c("pop var:",round(pop_var),", mean sample vars:",round(mn_smpl_var)
)
tag
hist(vrs_pop_smpl,main=tag)
roun(mean(normalized))
round(mean(normalized))
tag=c("pop var:",round(pop_var,2),", mean sample vars:",round(mn_smpl_var,2))
tag
hist(vrs_pop_smpl,main=tag)
?ToothGrowth
attach(ToothGrowth)
pairs(ToothGrowth)
plot(len~sup)
plot(len~supp)
plot(dose~supp)
plot(len~dose)
plot(len~supp)
hist(len)
hist(dose)
hist(supp)
class(supp)
str(ToothGrowh)
str(ToothGrowth)
range(dose)
hist(dose)
plot(dose,supp)
hist(len)
hist(dose)
hist(supp)
plot(supp~dose)
plot(dose~supp)
plot(len~supp)
plot(len~dose)
?ToothGrowth
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
hist(len)
hist(dose) #dose
?ToothLength
?ToothGrowth
pairs(ToothGrowth)
par(mfrow=c(2,2))
hist(len) #tooth length (len). could be normal distribution with larger sample size.
hist(dose) #dose in milligrams (dos)e. three dosages. one for 20 samples each.
# supplement type (supp) is categorical w/ 2 values
plot(len~supp)
plot(len~dose)
par(mfrow=c(2,2))
hist(len) #tooth length (len). could be normal distribution with larger sample size.
hist(dose) #dose in milligrams (dos)e. three dosages. one for 20 samples each.
# supplement type (supp) is categorical w/ 2 values
plot(len~supp,main="length ~ supplement")
plot(len~dose,main="length ~ dose")
par(mfrow=c(1,2))
hist(len)      #tooth length (len). could be normal distribution with larger sample size.
hist(dose)     #dose in milligrams (dos)e. three dosages. one for 20 samples each.
# supplement type (supp) is categorical w/ 2 values
pairs(ToothGrowth) # evidence of relationship between supp and len and dos and len.
# close up on relationships
par(mfrow=c(1,2))
plot(len~supp,main="length ~ supplement")
plot(len~dose,main="length ~ dose")
plot(len~dose,main="length ~ dose"); abline(10,2)
plot(len~dose,main="length ~ dose"); abline(10,5,col="red")
plot(len~dose,main="length ~ dose"); abline(8,7,col="red",lwd=4)
plot(len~dose,main="length ~ dose"); abline(6,9,col="red",lwd=4)
plot(len~dose,main="length ~ dose"); abline(4,10,col="red",lwd=4)
plot(len~dose,main="length ~ dose"); abline(2,12,col="red",lwd=4)
plot(len~dose,main="length ~ dose"); abline(4,11,col="red",lwd=4)
plot(len~dose,main="length ~ dose"); abline(4,10,col="red",lwd=4)
# close up on relationships
par(mfrow=c(1,2))
plot(len~supp,main="length ~ supplement")
plot(len~dose,main="length ~ dose"); abline(4,10,col="red",lwd=4)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
coplot(len ~ supp | dose, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs supplement, given dosage")
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
coplot(len ~ supp | dose, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs supplement, given dosage")
unique(supplement)
unique(sup)
unique(Sup)
str(ToothGrowth)
unique(supp)
length(unique(supp))
mean(len)
mean(len[supp==VC])
mean(len[supp=="VC"])
mean(len[supp=="OJ"])
sups=unique(supp)
for(i in length(sups)){sup_mns[i]=mean(len[supp=="VC"])}
sup_mns=NULL
for(i in length(sups)){sup_mns[i]=mean(len[supp=="VC"])}
sup_mns
for(i in length(sups)){sup_mns[i]=mean(len[supp==sup_mns[i]])}
sup_mns
for(i in length(sups)){sup_mns[i]=mean(len[supp==sups[i])}
sups
sups[i]
i
len[supp==sups[i]]
mean(len[supp==sups[i]])
sup_mns
sup_mns[i]=mean(len[supp==sups[i])
for(i in length(sups)){sup_mns[i]=mean(len[supp==sups[i],)}
for(i in length(sups)){sup_mns[i]=mean(len[supp==sups[i]])}
sup_mns
mean(len)
#mean by supplement
sups=unique(supp)
sup_mns=NULL
for(i in 1:length(sups)){sup_mns[i]=mean(len[supp==sups[i]])}
sup_mns
doses=unique(dose)
dose_mns=NULL
for(i in 1:length(doses)){dose_mns[i]=mean(len[does==doses[i]])}
for(i in 1:length(doses)){dose_mns[i]=mean(len[dose==doses[i]])}
dose_mns
both=unique(dose,sup)
ovr_mn=mean(len)
ovr_mn
mean(len)+c(-1,1)*qnorm(0.975)*sd(len)/sqrt(length(len)))
mean(len)+c(-1,1)*qnorm(0.975)*sd(len)/sqrt(length(len))
ci_mn_2sd=mean(len)+c(-1,1)*qnorm(0.95)*sd(len)/sqrt(length(len))
ci_mn_3sd=mean(len)+c(-1,1)*qnorm(0.975)*sd(len)/sqrt(length(len))
hist(len)
sd(len)
var(len)
qnorm(0.975)
qnorm(0.95)
ci_mn_2sd=mean(len)+c(-1,1)*qnorm(0.95)*sd(len)/sqrt(length(len)); ci_mn_2sd
ci_mn_3sd=mean(len)+c(-1,1)*qnorm(0.975)*sd(len)/sqrt(length(len)); ci_mn_3sd
#mean by supplement
sups=unique(supp)
sup_mns=NULL
for(i in 1:length(sups)){sup_mns[i]=mean(len[supp==sups[i]])}
sup_mns
#mean by dose
doses=unique(dose)
dose_mns=NULL
for(i in 1:length(doses)){dose_mns[i]=mean(len[dose==doses[i]])}
dose_mns
nosim=100
dose_mns=matrix(nosim*doses)
dose_mns
dose_mns=matrix(nosim*length(doses))
dose_mns
dim(pop)
?matrix
dose_mns=matrix(NA,length(doses),nosim)
dim(dose_mns)
dose_mns=matrix(NA,nosim,length(doses))
dose_mna
does_mns
dose_mns
for i in 1:nosim){
for(j in 1:length(doses)){dose_mns[i,j]=mean(len[dose==doses[j]])}
for(i in 1:nosim){
for(j in 1:length(doses)){dose_mns[i,j]=mean(len[dose==doses[j]])}
}
dose_mns
doses=unique(dose)
dose_mns=NULL
for(j in 1:length(doses)){dose_mns[j]=mean(len[dose==doses[j]])}
dose_mns
ci_mn_2sd=mean(len)+c(-1,1)*qnorm(0.95)*sd(len)/sqrt(length(len)); ci_mn_2sd
ci_mn_3sd=mean(len)+c(-1,1)*qnorm(0.975)*sd(len)/sqrt(length(len)); ci_mn_3sd
#mean by supplement
sups=unique(supp)
sup_mns=NULL
for(i in 1:length(sups)){sup_mns[i]=mean(len[supp==sups[i]])}
sup_mns
#mean by dose
doses=unique(dose)
dose_mns=NULL
for(j in 1:length(doses)){dose_mns[j]=mean(len[dose==doses[j]])}
dose_mns
sd(len)
sd(len)
mean(len)
sups
dose
doses
unique(dose)
unique(supp)
unique(dose) & unique(supp)
oj_rcds=ToothGrowth[supp==OJ,]
oj_rcds=ToothGrowth[supp==as.factor("OJ"),]
as.factor("OJ")
as.factor(OJ)
supp
supp==as.factor("OJ")
supp==OJ
supp=="OJ"
oj_rcds=ToothGrowth[supp=="OJ",]
vc_rcds=ToothGrowth[supp=="VC"]
vc_rcds=ToothGrowth[supp=="VC",]
dim(ToothGrowth)
dim(vc_rcds)
dim(oj_rcds)
oj_rcds
oj_rcds=ToothGrowth[supp=="OJ",]
vc_rcds=ToothGrowth[supp=="VC",]
doses=unique(dose)
oj_dose_mns=NULL
vc_dose_mns=NULL
for(i in 1:length(doses)){
oj_dose_mns[i]=mean(oj_rcds$len[oj_rcds$dose==doses[i]])
vc_dose_mns[i]=mean(vc_rcds$len[vc_rcds$dose==doses[i]])
}
oj_dose_mns; vc_dose_mns
# 1. calculate the sample mean for tooth length
mean(len)
# 2. calcuate confidence intervals around the tooth length mean
ci_mn_2sd=mean(len)+c(-1,1)*qnorm(0.95)*sd(len)/sqrt(length(len)); ci_mn_2sd
ci_mn_3sd=mean(len)+c(-1,1)*qnorm(0.975)*sd(len)/sqrt(length(len)); ci_mn_3sd
# 3. calculate sample means for different supplements
sups=unique(supp)
sup_mns=NULL
for(i in 1:length(sups)){sup_mns[i]=mean(len[supp==sups[i]])}
sup_mns
# 4. calculate sample means for different doses
doses=unique(dose)
dose_mns=NULL
for(j in 1:length(doses)){dose_mns[j]=mean(len[dose==doses[j]])}
dose_mns
# 5. calculate sample means for combinations of supplements and doses
oj_rcds=ToothGrowth[supp=="OJ",]
vc_rcds=ToothGrowth[supp=="VC",]
doses=unique(dose)
oj_dose_mns=NULL
vc_dose_mns=NULL
for(i in 1:length(doses)){
oj_dose_mns[i]=mean(oj_rcds$len[oj_rcds$dose==doses[i]])
vc_dose_mns[i]=mean(vc_rcds$len[vc_rcds$dose==doses[i]])
}
oj_dose_mns; vc_dose_mns
#### Author: Michael Downs
install.packages("pandoc")
install.packages(c("devtools", "httr", "manipulate", "UsingR"))
